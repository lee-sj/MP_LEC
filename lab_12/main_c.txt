#include "stm32f10x_lib.h"
#include"System_func.h"

char move_flag = 0;
char dir_flag = 0;

void INT_Configuration(void);
void Timer3_Delay_init();
void Timer3_delay_ms(u16 time);

int main(void){
  
  Init_STM32F103();
  
  unsigned char mot_tbl[]={0x01, 0x03, 0x02, 0x06, 0x04, 0x0c, 0x08, 0x09};
  
  u8 index=0;
  
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
  
  INT_Configuration();
  Timer3_Delay_init();
  
  while (1){
    if ( move_flag== 1) {
      GPIO_ResetBits(GPIOC, mot_tbl[index]);
      
      if(dir_flag==1){
        if(index>=8) 
          index=0;
        else 
          index++;
      } else {
        if(index==0) 
          index=7;
        else
          index--;
      }
      GPIO_SetBits(GPIOC,mot_tbl[index]);
      
      Timer3_delay_ms(1);
    } else {
      GPIO_ResetBits(GPIOC,mot_tbl[index]);
    }
  }
}



void INT_Configuration(void){
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
  
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource1 );
  EXTI_InitStructure.EXTI_Line = EXTI_Line1;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
}

void Timer3_Delay_init(){
  TIM_TimeBaseInitTypeDef TIM3_TimeBaseInitStruct;
  
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
  TIM3_TimeBaseInitStruct.TIM_Prescaler = 7200-1;
  TIM3_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
  TIM3_TimeBaseInitStruct.TIM_Period = 4-1;
  TIM3_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInit(TIM3,&TIM3_TimeBaseInitStruct);
}

void Timer3_delay_ms(u16 time){
  TIM_Cmd(TIM3,ENABLE);

  while(time--){
    while(TIM_GetFlagStatus(TIM3,TIM_IT_Update)==RESET);
  
    TIM_ClearFlag(TIM3,TIM_FLAG_Update);
  }
  TIM_Cmd(TIM3,DISABLE);

}
// 201302386@hufs.ac.kr lee-sj